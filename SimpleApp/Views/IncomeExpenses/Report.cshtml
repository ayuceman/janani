@model MainReportModel

<!DOCTYPE html>
<html>
<head>
    <title>Income/Expenses Report</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.3/css/bootstrap.min.css"
            integrity="sha512-jnSuA4Ss2PkkikSOLtYs8BlYIeeIK1h99ty4YfvRPAlzr377vr3CXDb7sb7eEEBYjDtcYj+AjBH3FLv5uSJuXg=="
            crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    
    <script>
        function addRow(categoryElement) {
            var tbody = categoryElement.querySelector('tbody');
            var newRow = document.createElement('tr');
            newRow.classList.add('data-row');

            newRow.innerHTML = `
                                        <td><input type="text" class="form-control name" value="" /></td>
                                        <td><input type="number" class="form-control current-month" value="0" onchange="updateTotals()" /></td>
                                        <td>
                                            <button type="button" onclick="addRow(this.closest('.category'))" class="btn btn-success">Add Row</button>
                                            <button type="button" onclick="removeRow(this)" class="btn btn-danger">Remove</button>
                                        </td>
                                    `;

            tbody.appendChild(newRow);
            updateActionButtons(categoryElement);
            updateTotals();
        }

        function removeRow(button) {
            var row = button.closest('tr');
            var categoryElement = row.closest('.category');
            row.remove();
            updateActionButtons(categoryElement);
            updateTotals();
        }

        function updateActionButtons(categoryElement) {
            var rows = categoryElement.querySelectorAll('tr.data-row');
            rows.forEach((row, index) => {
                console.log(row);
                var actionsCell = row.querySelector('td:last-child');
                if (index === rows.length - 1) {
                    actionsCell.innerHTML = `
                                                <button type="button" onclick="addRow(this.closest('.category'))" class="btn btn-success">Add Row</button>
                                                <button type="button" onclick="removeRow(this)" class="btn btn-danger">Remove</button>
                                            `;
                } else {

                        actionsCell.innerHTML = `
                                                        <button type="button" onclick="removeRow(this)" class="btn btn-danger">Remove</button>
                                                    `;

                }
            });
        }

        function updateTotals() {

            var incomeCurrentTotal = 0;

            var expenseCurrentTotal = 0;

            document.querySelectorAll('.category').forEach(categoryElement => {
                var totalCurrentMonth = 0;
                var totalNextMonth = 0;

                categoryElement.querySelectorAll('tr.data-row').forEach(row => {
                    var currentMonthValue = parseFloat(row.querySelector('.current-month').value) || 0;

                    totalCurrentMonth += currentMonthValue;

                    if (categoryElement.dataset.category === "Income") {
                        incomeCurrentTotal += currentMonthValue;
                    }
                    else {
                        expenseCurrentTotal += currentMonthValue;
                    }
                });

                categoryElement.querySelector('.total-current-month').textContent = totalCurrentMonth.toFixed(2);

                var currentTotal = (incomeCurrentTotal - expenseCurrentTotal).toFixed(2);


                if (currentTotal < 0) {
                    $("#overall-current-total").css("color", "red");
                } else {
                    $("#overall-current-total").css("color", "green");
                }

                $("#overall-current-total").html(currentTotal);
            });
        }

        function saveChanges() {
            var report = {
                ReportLogId: @Model.ReportLogId,
                DateString: '@Model.DateString',
                ReportList: []
            };


            document.querySelectorAll('.category').forEach(categoryElement => {
                var category = {
                    Category: categoryElement.dataset.category,
                    IncomeExpenses: []
                };

                categoryElement.querySelectorAll('tr.data-row').forEach(row => {
                    var incomeExpense = {
                        CategoryId: parseInt(row.dataset.categoryId || 0), // Default to 0 if not set
                        Name: row.querySelector('.name').value,
                        CurrentMonthAmount: parseFloat(row.querySelector('.current-month').value),
                    };

                    category.IncomeExpenses.push(incomeExpense);
                });

                report.ReportList.push(category);
            });

            // console.log(JSON.stringify(report));

            // console.log(report.ReportList);
            // alert();

            // fetch('@Url.Action("SaveReport", "IncomeExpenses")', {
            //     method: 'POST',
            //     headers: {
            //         'Content-Type': 'application/json'
            //     },
            //     body: JSON.stringify(report)
            // }).then(response => {
            //     console.log(response);
            //     if (response.success) {
            //         alert('Report saved successfully!');
            //     } else {
            //         alert(response.error);
            //     }
            // }).catch(error => {
            //     console.error('Error saving changes:', error);
            //     alert('An error occurred while saving changes.');
            // });

            $.ajax({
                url: '@Url.Action("SaveReport", "IncomeExpenses")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(report),
                success: function (response) {
                    console.log(response);
                    if (response.success) {
                        alert('Report saved successfully!');
                    } else {
                        alert(response.errors);
                    }
                    location.reload();
                },
                error: function () {
                    return false;
                }
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.category').forEach(updateActionButtons);
            updateTotals();
        });

        function backToLog() {
            var url = '@Url.Action("Index", "IncomeExpenses")';
            window.location.href = url;
        }

    </script>
</head>
<body>
    <div class="income-expense-report-detail-page pt-4 pb-4">
        <a href="#" onclick="backToLog()">Back To Report Log</a>
        <div class="container">
            <div class="d-flex justify-content-between title-section">
                <h2>Income and Expenses Report</h2>
                <span>Date: @Model.DateString</span>
            </div>

            @if (!string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <p class="text-danger">@Model.ErrorMessage</p>
            }

            @if (Model.ReportList != null && Model.ReportList.Any())
            {
                <div class="income-expense-report">
                    <button onclick="saveChanges()" class="btn btn-primary">Save Changes</button>
                    @foreach (var group in Model.ReportList)
                    {
                        <h4>@group.Category</h4>
                        <table class="category" data-category="@group.Category">
                            <thead class="thead-light">
                                <tr>
                                    <th>Name</th>
                                    <th>Amount</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in group.IncomeExpenses)
                                {
                                    <tr class="data-row" data-category-id="@item.CategoryId">
                                        <td><input type="text" class="form-control name" value="@item.Name" /></td>
                                        <td><input type="number" class="form-control current-month" value="@item.CurrentMonthAmount" onchange="updateTotals()" /></td>
                                        <td>
                                            <button type="button" onclick="removeRow(this)" class="btn btn-secondary">
                                                <i class="fa fa-trash" aria-hidden="true"></i> Remove
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td>
                                        @if (group.Category == "Income")
                                        {
                                            <strong>Income Total</strong>
                                        }
                                        else
                                        {
                                            <strong>Expenses Total</strong>
                                        }
                                    </td>
                                    <td class="total-current-month"></td>
                                    <td></td>
                                </tr>
                            </tfoot>
                        </table>
                    }
                </div>

                <div class="row">
                    <div class="col-6">
                        <strong>Total = </strong><span id="overall-current-total"></span>
                    </div>
                </div>
            }
            else
            {
                <p>No data available.</p>
            }
        </div>
    </div>
</body>
</html>
